.. _assembly_programming:

****************************
Assembly programming
****************************

In this chapter we will cover the basics how how to develop software using assembly language on the Atmega 328p microcontroller on the Arduino UNO. We will cover three different scenarios, pure assembly, some assembly and some C in separate files, and inline assembly in C. Although assembly language is typically more cumbersome to use than C, it has some advantages when it comes to optimizing the code for speed or memory usage. It is typically not a god idea to write a large software project using pure assembly language, but it can be useful for optimizing the most CPU intensive parts of the code. Additionally an understanding of assembly language is invaluable when debugging problematic code. 



Disassembly of your project
===========================

It is useful to be able to view the assembly code which is generated by the C compiler. This is commonly used as part of the debugging process.


The command line tool "avr-objdump" can be used to obtain a disassembly code listing for a given object file, or the entire project.

.. code::

    avr-objdump -d example.S.o

The command produces the following result:

.. code::

    example.S.o:     file format elf32-avr


    Disassembly of section .text:

    00000000 <led_on_asm_function>:
       0:	0f 93       	push	r16
       2:	01 e0       	ldi	r16, 0x01	; 1
       4:	05 bd       	out	0x25, r16	; 37
       6:	0f 91       	pop	r16
       8:	08 95       	ret

    0000000a <led_off_asm_function>:
       a:	21 e0       	ldi	r18, 0x01	; 1
       c:	28 bb       	out	0x18, r18	; 24
       e:	08 95       	ret


If the command is used on the object file from "main.cpp" however, it will produce a huge output even for a simple program. This is due to all the additional code which is included from the Arduino library.


It is also possible to disassemble the entire HEX file:

.. code::

    avr-objdump -j .sec1 -d -m avr5 firmware.hex



Better disassembly
------------------

If you are developing a program, and hence have access to the C/C++ source code, it is possible to generate a more insightful disassembly.



Disassembly in PlatformIO
-------------------------

Inline assembly
===============


Mixing C and assembly
=====================

In this section we will go through the procedure, and provide some examples on how to mix C and assembly language, where the code is kept in separate files. You may define special high performance function which are written in assembly, and call those functions from within your C program.

Bare metal project
------------------

In this section we will explore the process of creating and uploading a simple bare metal project which blinks a LED on the Arduino UNO using a mix of C, and assembly.

Start by creating two files: "main.c", and "ledcontrol.S" in a new directory.

**main.c:**

.. literalinclude:: ../../../projects/makefile/c-assembly-led-blink/main.c
    :language: c
    :linenos:

**ledcontrol.S:**

.. literalinclude:: ../../../projects/makefile/c-assembly-led-blink/ledcontrol.S
    :language: ca65
    :linenos:

Assemble the assembly file:

.. code::
    
    avr-gcc -g -Wall -Os -DF_CPU=16000000 -mmcu=atmega328 -c ledcontrol.S

Compile the c file:

.. code::

    avr-gcc -g -Wall -Os -DF_CPU=16000000 -mmcu=atmega328 -c main.c 

Link the object files

.. code::

    avr-gcc -g -mmcu=atmega328 -o firmware.elf main.o delay.o

Generate the HEX file:

.. code::

    avr-objcopy -O ihex firmware.elf firmware.hex

Flash the firmware using the Arduino bootloader:

.. code::

    avrdude -v -p atmega328p -c arduino -P /dev/ttyACM0 -b 115200 -D -U flash:w:firmware.hex:i


PlatformIO
----------

In order to mix C and Assembly in a Arduino project in PlatformIO you should create a new source file with the ".S" extension in your "src" directory.

In order to access your assembly functions from C, they need to be declared using C syntax in the source file where they are going to be used, or in a header file which is included in to the source file. Since platformIO uses C++ for Arduino you have to use the :code:`extern "C"` directive:

.. code-block:: C

    extern "C" {
      void led_on_asm_function();
      void led_off_asm_function();
    }

C++ uses a technique known as name mangling on the function names in order to support features such as polymorphism. This causes the function names in the object files to change compared to how they appear in the source file, and thus they will not match the name defined in the assembly file. If the names does not match, the linker will not be able to produce functional machine code. The :code:`extern "C"` directive disables this feature by informing the compiler that the function should be considered C functions.

Pure assembly
=============

Pure assembly development is also possible, and provides a deep insight in to the low level operation of the microcontroller.




Interrupts
----------